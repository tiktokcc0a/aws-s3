// shared/utils.js
function getRandomDelay(min, max) { return Math.random() * (max - min) + min; }
async function humanLikeClick(pageOrFrame, selector, timeout = 180000) { try { const element = await pageOrFrame.waitForSelector(selector, { visible: true, timeout }); if(!element) throw new Error(`humanLikeClick: 元素 ${selector} 未找到`); const isClickable = await element.evaluate(el => { const style = window.getComputedStyle(el); return !el.disabled && el.offsetWidth > 0 && el.offsetHeight > 0 && style.pointerEvents !== 'none'; }); if (!isClickable) { await pageOrFrame.waitForFunction( (sel) => { const el = document.querySelector(sel); if (!el) return false; const style = window.getComputedStyle(el); return !el.disabled && el.offsetWidth > 0 && el.offsetHeight > 0 && style.pointerEvents !== 'none'; }, { timeout: 5000 }, selector ); } const box = await element.boundingBox(); if (box) { const clickX = box.x + (box.width / 2) + (Math.random() - 0.5) * box.width * 0.4; const clickY = box.y + (box.height / 2) + (Math.random() - 0.5) * box.height * 0.4; const mouse = pageOrFrame.mouse; await mouse.move(clickX, clickY, { steps: 25 + Math.floor(Math.random() * 15) }); await new Promise(resolve => setTimeout(resolve, getRandomDelay(150, 400))); await mouse.click(clickX, clickY, { delay: getRandomDelay(40, 120) }); return true; } else { await element.click(); return true; } } catch (error) { try { await pageOrFrame.evaluate((sel) => { const el = document.querySelector(sel); if (el) el.click(); }, selector); return true; } catch (evalError) { return false; } } }
async function humanLikeType(pageOrFrame, selector, text, timeout = 180000) { await pageOrFrame.waitForSelector(selector, { visible: true, timeout }); const element = await pageOrFrame.$(selector); if (!element) { throw new Error(`humanLikeType: 元素 ${selector} 未找到。`); } try { await element.focus(); if (pageOrFrame.keyboard) { const isMac = (await pageOrFrame.evaluate(() => navigator.platform.includes('Mac'))); const modifierKey = isMac ? 'Meta' : 'Control'; await pageOrFrame.keyboard.down(modifierKey); await pageOrFrame.keyboard.press('A'); await pageOrFrame.keyboard.up(modifierKey); await pageOrFrame.keyboard.press('Delete'); await new Promise(resolve => setTimeout(resolve, getRandomDelay(50, 150))); } else { await element.evaluate((el) => el.value = '', ''); } } catch (clearError) { console.warn(`[humanLikeType] 清空输入框时出错: ${clearError.message}`); } await pageOrFrame.type(selector, text, { delay: getRandomDelay(50, 150) }); }
function getMonthName(monthNumber) { const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; return months[monthNumber - 1]; }
module.exports = { getRandomDelay, humanLikeClick, humanLikeType, getMonthName };